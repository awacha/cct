import datetime

from PyQt5 import QtWidgets

from .samplesexposuretimesmodel import ExposureTimesModel
from .scriptgenerator_ui import Ui_Wizard
from ....core.instrument.instrument import Instrument
from ....core.services.samples import SampleStore
from ....core.utils.inhibitor import Inhibitor


class ScriptWizard(QtWidgets.QWizard, Ui_Wizard):
    def __init__(self, parent, credo:Instrument):
        super().__init__(parent)
        self.credo = credo
        self._updating = Inhibitor()
        self._sampleconnections = []
        self.setupUi(self)

    def setupUi(self, Wizard):
        Ui_Wizard.setupUi(self, Wizard)
        self.exposuresModel = ExposureTimesModel(None)
        self.samplesTreeView.setModel(self.exposuresModel)
        self.startTrimGainComboBox.currentIndexChanged.connect(self.onGainChanged)
        self._sampleconnections=[self.credo.services['samplestore'].connect('list-changed', self.onSamplesChanged)]
        self.onSamplesChanged(self.credo.services['samplestore'])
        self.onGainChanged()

    def onGainChanged(self):
        if self.startTrimGainComboBox.currentText()=='highG':
            self.startTrimThresholdSpinBox.setMinimum(3814)
            self.startTrimThresholdSpinBox.setMaximum(11614)
        elif self.startTrimThresholdSpinBox.currentText()=='midG':
            self.startTrimThresholdSpinBox.setMinimum(4425)
            self.startTrimThresholdSpinBox.setMaximum(14328)
        elif self.startTrimThresholdSpinBox.currentText()=='lowG':
            self.startTrimThresholdSpinBox.setMinimum(6685)
            self.startTrimThresholdSpinBox.setMaximum(20202)
        else:
            assert False

    def onSamplesChanged(self, samplestore:SampleStore):
        for sample in self.credo.services['samplestore']:
            self.exposuresModel.addSample(sample.title)
        for i in range(self.exposuresModel.columnCount()):
            self.samplesTreeView.resizeColumnToContents(i)
        for combobox in [self.darkSampleNameComboBox,
                         self.emptyBeamSampleNameComboBox,
                         self.glassyCarbonSampleNameComboBox,
                         self.silverBehenateSampleNameComboBox]:
            with self._updating:
                prevselected = combobox.currentText()
                combobox.clear()
                combobox.addItems(sorted([s.title for s in self.credo.services['samplestore'] if s.category in ['calibration sample', 'normalization sample']]))
                combobox.setCurrentIndex(combobox.findText(prevselected))
                if combobox.currentIndex() == -1:
                    if combobox is self.darkSampleNameComboBox:
                        combobox.setCurrentIndex(combobox.findText(self.credo.config['datareduction']['darkbackgroundname']))
                    elif combobox is self.emptyBeamSampleNameComboBox:
                        combobox.setCurrentIndex(combobox.findText(self.credo.config['datareduction']['backgroundname']))
                    elif combobox is self.glassyCarbonSampleNameComboBox:
                        combobox.setCurrentIndex(combobox.findText(self.credo.config['datareduction']['absintrefname']))
                    elif combobox is self.silverBehenateSampleNameComboBox:
                        while True:
                            if combobox.currentText().lower().startswith('sba15') or combobox.currentText().lower().startswith('agbeh'):
                                break
                            if combobox.currentIndex() >= combobox.count()-1:
                                break
                            combobox.setCurrentIndex(combobox.currentIndex()+1)

    def cleanup(self):
        for c in self._sampleconnections:
            self.credo.services['samplestore'].disconnect(c)
        self._sampleconnections=[]

    def script(self):
        text = "# Script generated by {} using the script wizard\n# Date: {}\n".format(self.credo.services['accounting'].current_user.username, datetime.datetime.now())
        if self.endAllowUserBreakCheckBox.isChecked():
            text +="newflag('Break')\n"
            text +="clearflag('Break')\n"
        if self.startCloseShutterCheckBox.isChecked():
            text+="shutter('close')\n"
        if self.startBeamStopInCheckBox.isChecked():
            text+="beamstop('in')\n"
        if self.startXrayPowerCheckBox.isChecked():
            text+="xray_power('{}')\n".format(self.startXrayPowerComboBox.currentText())
        if self.startTrimDetectorCheckBox.isChecked():
            text += "trim({:d}, '{}')\n".format(self.startTrimThresholdSpinBox.value(), self.startTrimGainComboBox.currentText())
        if self.startTemperatureCheckBox.isChecked():
            text += "settemp({:.3f})\n".format(self.startTemperatureDoubleSpinBox.value())
            text += "circulator('start')\n"
        if self.startOpenShutterCheckBox.isChecked():
            text += "shutter('open')\n"
        text +='\n'
        text +="set('iloop',0)\n"
        if self.numberOfIterationsSpinBox.value()>0:
            text +="set('Nloop',{})\n".format(self.numberOfIterationsSpinBox.value())
        text +='@loop\n'
        text +="    set('iloop', iloop+1)\n"
        if self.numberOfIterationsSpinBox.value()>0:
            text +="    goif('finish', iloop>Nloop)\n"
            text +="    print('Starting cycle: {} of {}'.format(iloop, Nloop))\n"
        else:
            text +="    print('Starting cycle {}'.format(iloop))\n"
        text +="    gosub('calibration')\n"
        text +="    gosub('samples')\n"
        text +="    goonflag('finish','Break')\n"
        text +="    goto('loop')\n\n"
        text +="@calibration\n"
        text +="    sample('{}')\n".format(self.darkSampleNameComboBox.currentText())
        text +="    expose({:.3f})\n".format(self.darkExposureTimeDoubleSpinBox.value())
        text +="    sample('{}')\n".format(self.emptyBeamSampleNameComboBox.currentText())
        text +="    expose({:.3f})\n".format(self.emptyBeamExposureTimeDoubleSpinBox.value())
        text +="    sample('{}')\n".format(self.glassyCarbonSampleNameComboBox.currentText())
        text +="    expose({:.3f})\n".format(self.glassyCarbonExposureTimeDoubleSpinBox.value())
        text +="    sample('{}')\n".format(self.silverBehenateSampleNameComboBox.currentText())
        text +="    expose({:.3f})\n".format(self.silverBehenateExposureTimeDoubleSpinBox.value())
        text +="    return\n\n"
        text +="@samples\n"
        for samplename, exptime, iterations in self.exposuresModel:
            text +="    sample('{}')\n".format(samplename)
            for i in range(iterations):
                text +="    expose({:.3f})\n".format(exptime)
        text +="    return\n\n"
        text +='@finish\n'
        if self.endCloseShutterCheckBox.isChecked():
            text +="    shutter('close')\n"
        if self.endSetXrayPowerCheckBox.isChecked():
            text +="    xray_power('{}')\n".format(self.endSetXrayPowerComboBox.currentText())
        text +='    end\n'
        return text

