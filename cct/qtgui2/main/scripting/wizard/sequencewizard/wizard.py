import datetime

from PySide6 import QtWidgets

from .calibrants import CalibrantsPage
from .endpage import EndPage
from .initialization import InitPage
from .samples import SamplesPage
from .startpage import StartPage
from .wizard_ui import Ui_Wizard
from ......core2.algorithms.orderforleastmotormovement import orderForLeastMotorMovement
from ......core2.instrument.instrument import Instrument


class SequenceWizard(QtWidgets.QWizard, Ui_Wizard):
    startpage: StartPage
    initpage: InitPage
    calibrantspage: CalibrantsPage
    samplespage: SamplesPage
    endpage: EndPage

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.setupUi(self)

    def setupUi(self, Wizard):
        super().setupUi(Wizard)
        self.startpage = StartPage(parent=self)
        self.addPage(self.startpage)
        self.initpage = InitPage(parent=self)
        self.addPage(self.initpage)
        self.calibrantspage = CalibrantsPage(parent=self)
        self.addPage(self.calibrantspage)
        self.samplespage = SamplesPage(parent=self)
        self.addPage(self.samplespage)
        self.endpage = EndPage(parent=self)
        self.addPage(self.endpage)

    def script(self) -> str:
        instrument = Instrument.instance()
        t = f'# Script generated by {instrument.auth.username()} using the script wizard\n'
        t += f'# Date: {datetime.datetime.now()}\n'
        if self.field('userBreakFlag'):
            t += "newflag('Break')\nclearflag('Break')\n"
        if self.field('closeShutterBefore'):
            t += "shutter('close')\n"
        if self.field('beamstopIn'):
            t += "beamstop('in')\n"
        if self.field('initializeXraySource'):
            t += f"xray_power('{self.field('initializeXraySourceTo')}')\n"
        if self.field('trimDetector'):
            t += f"trim({self.field('threshold')}, '{self.field('gain')}')\n"
        if self.field('setSampleTemperature'):
            t += f"settemp({self.field('sampleTemperature'):.3f})\ncirculator('start')\n"
        if self.field('openShutterBefore'):
            t += f"shutter('open')\n"
        t += '\n'
        t += "set('iloop', 0)\n"
        if self.field('iterationCount') > 0:
            t += f"set('Nloop', {self.field('iterationCount')})\n"
        t += "@loop\n" \
             "    set('iloop', iloop+1)\n"
        if self.field('iterationCount') > 0:
            t += "    goif('finish', iloop > Nloop)\n"
        t += "    print('Starting cycle {}'.format(iloop))\n" \
             "    gosub('calibration')\n" \
             "    gosub('samples')\n" \
             "    goonflag('finish', 'Break')\n" \
             "    goto('loop')\n\n"
        t += '@calibration\n' \
             f"    sample('{self.field('darkSample')}')\n" \
             f"    expose({self.field('darkTime'):.3f})\n" \
             f"    sample('{self.field('emptySample')}')\n" \
             f"    expose({self.field('emptyTime'):.3f})\n" \
             f"    sample('{self.field('absintSample')}')\n" \
             f"    expose({self.field('absintTime'):.3f})\n" \
             f"    sample('{self.field('qCalibrantSample')}')\n" \
             f"    expose({self.field('qCalibrantTime'):.3f})\n" \
             f"    return\n\n"
        exposures = self.samplespage.exposures()
        if self.field('orderSamples'):
            samples = [instrument.samplestore[e[0]] for e in exposures]
            qsample = instrument.samplestore[self.field('qCalibrantSample')]
            exposures = orderForLeastMotorMovement(
                [(e, (s.positionx[0], s.positiony[0])) for e, s in zip(exposures, samples)],
                (qsample.positionx[0], qsample.positiony[0])
            )
        t += '@samples\n'
        for sn, exptime, count in exposures:
            t += f"    sample('{sn}')\n"
            if count == 1:
                t += f"    expose({exptime:.3f})\n"
            else:
                t += f"    exposemulti({exptime:.3f}, {count})\n"
        t += '    return\n\n'
        t += '@finish\n'
        if self.field('closeShutterAfter'):
            t += '    shutter(\'close\')\n'
        if self.field('setXraySourcePowerAfter'):
            t += f'    xray_power(\'{self.field("setXraySourcePowerAfterTo")}\')\n'
        t += '    end\n'
        return t
